AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service and Task Definition for Cloud Defender Game'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First private subnet ID
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second private subnet ID
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: First public subnet ID
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Second public subnet ID
  
  EcsCluster:
    Type: String
    Description: ECS Cluster name
  
  EcrRepository:
    Type: String
    Description: ECR Repository URI
  
  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag
  
  ContainerPort:
    Type: Number
    Default: 8080
    Description: Container port
  
  HealthCheckPath:
    Type: String
    Default: /health
    Description: Health check path
  
  DynamoDBTable:
    Type: String
    Description: DynamoDB table name
  
  TaskCpu:
    Type: Number
    Default: 256
    Description: Task CPU units
  
  TaskMemory:
    Type: Number
    Default: 512
    Description: Task memory (MB)
  
  DesiredCount:
    Type: Number
    Default: 2
    Description: Desired task count
  
  MaxCapacity:
    Type: Number
    Default: 8
    Description: Maximum task count for auto-scaling
  
  MinCapacity:
    Type: Number
    Default: 2
    Description: Minimum task count for auto-scaling
  
  CpuScalingThreshold:
    Type: Number
    Default: 70
    Description: CPU utilization threshold for scaling (%)

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Resources:
  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-lb-sg'
        - Key: Environment
          Value: !Ref Environment
  
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ECS service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-service-sg'
        - Key: Environment
          Value: !Ref Environment
  
  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'cloud-defender-${Environment}-alb'
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-alb'
        - Key: Environment
          Value: !Ref Environment
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'cloud-defender-${Environment}-tg'
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-tg'
        - Key: Environment
          Value: !Ref Environment
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-task-execution-role'
        - Key: Environment
          Value: !Ref Environment
  
  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-task-role'
        - Key: Environment
          Value: !Ref Environment
  
  TaskRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub 'cloud-defender-${Environment}-task-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:Scan
              - dynamodb:Query
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}'
          - Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:GetSamplingStatisticSummaries
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
      Roles:
        - !Ref TaskRole
  
  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub 'cloud-defender-${Environment}'
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: !Sub '${EcrRepository}:${ImageTag}'
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: DYNAMODB_TABLE
              Value: !Ref DynamoDBTable
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: LOG_GROUP_NAME
              Value: !Sub '/ecs/cloud-defender-${Environment}'
            - Name: SDL_VIDEODRIVER
              Value: dummy
            - Name: SDL_AUDIODRIVER
              Value: dummy
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/cloud-defender-${Environment}'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-task-definition'
        - Key: Environment
          Value: !Ref Environment
  
  # ECS Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Sub 'cloud-defender-${Environment}'
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # For dev, use public subnets with public IPs
          # For prod, use private subnets without public IPs
          AssignPublicIp: !If [IsProd, DISABLED, ENABLED]
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !If 
            - IsProd
            - - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
            - - !Ref PublicSubnet1
              - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub 'cloud-defender-${Environment}-service'
        - Key: Environment
          Value: !Ref Environment
  
  # Auto Scaling
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub 'service/${EcsCluster}/${Service.Name}'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
  
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub 'cloud-defender-${Environment}-cpu-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref CpuScalingThreshold
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

Outputs:
  ServiceUrl:
    Description: URL of the service
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceUrl'
  
  ServiceName:
    Description: Name of the ECS service
    Value: !GetAtt Service.Name
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
  
  TaskDefinitionArn:
    Description: ARN of the task definition
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinitionArn'
